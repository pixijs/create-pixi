"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[554],{3023:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var s=i(3696);const t={},a=s.createContext(t);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(a.Provider,{value:n},e.children)}},4236:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"guide/creations/engine","title":"Engine","description":"Initializing the Creation Engine","source":"@site/docs/guide/creations/engine.mdx","sourceDirName":"guide/creations","slug":"/guide/creations/engine","permalink":"/create-pixi/docs/guide/creations/engine","draft":false,"unlisted":false,"editUrl":"https://github.com/pixijs/create-pixi/tree/main/packages/docs/docs/guide/creations/engine.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Engine"},"sidebar":"guide","previous":{"title":"Getting Started","permalink":"/create-pixi/docs/guide/creations/intro"}}');var t=i(2540),a=i(3023);const o={sidebar_position:1,title:"Engine"},r=void 0,l={},c=[{value:"Initializing the Creation Engine",id:"initializing-the-creation-engine",level:2},{value:"Handling Resizing",id:"handling-resizing",level:2},{value:"Navigation &amp; Screens",id:"navigation--screens",level:2},{value:"Popup Screens",id:"popup-screens",level:3},{value:"Asset Loading",id:"asset-loading",level:3},{value:"Audio",id:"audio",level:2},{value:"Background Music (bgm)",id:"background-music-bgm",level:3},{value:"Sound Effects (sfx)",id:"sound-effects-sfx",level:3},{value:"Global Volume",id:"global-volume",level:3},{value:"Utility Functions",id:"utility-functions",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"initializing-the-creation-engine",children:"Initializing the Creation Engine"}),"\n",(0,t.jsx)(n.p,{children:"To initialize the engine, you need to create an instance of the CreationEngine class and call its init method. This method sets up the PixiJS application, initializes the screen manager, and loads the necessary assets."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { CreationEngine } from './engine/engine';\n\nconst engine = new CreationEngine();\n\n(async () => {\n    await engine.init({\n        background: '#1E1E1E',\n        resizeOptions: { minWidth: 768, minHeight: 1024, letterbox: false },\n    });\n})();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"handling-resizing",children:"Handling Resizing"}),"\n",(0,t.jsx)(n.p,{children:"The engine automatically handles resizing of the application. The resize behavior can be customized by passing options to the init method."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"await engine.init({\n    resizeOptions: { minWidth: 768, minHeight: 1024, letterbox: false },\n});\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"minWidth"}),": The minimum width of the application. If the window width is less than this value, the application will scale down to fit the window, but will report a logical width of this value."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"minHeight"}),": The minimum height of the application. If the window height is less than this value, the application will scale down to fit the window, but will report a logical height of this value."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"letterbox"}),": If true, the canvas will be letterboxed to maintain the aspect ratio of the application. If false, the canvas will be stretched to fill the window."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"navigation--screens",children:"Navigation & Screens"}),"\n",(0,t.jsx)(n.p,{children:"The engine provides a screen manager that allows you to manage different screens in your application. Each screen is a PixiJS Container that implements the Screen interface."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { Container } from 'pixi.js';\nimport { Screen } from './engine/navigation';\n\nexport class MyScreen extends Container implements Screen {\n    /** Show the screen */\n    show?(): Promise<void>;\n    /** Hide the screen */\n    hide?(): Promise<void>;\n    /** Pause the screen */\n    pause?(): Promise<void>;\n    /** Resume the screen */\n    resume?(): Promise<void>;\n    /** Prepare screen, before showing */\n    prepare?(): void;\n    /** Reset screen, after hidden */\n    reset?(): void;\n    /** Update the screen, passing delta time/step */\n    update?(time: Ticker): void;\n    /** Resize the screen */\n    resize?(width: number, height: number): void;\n    /** Blur the screen */\n    blur?(): void;\n    /** Focus the screen */\n    focus?(): void;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To show different screens in your app, you can use the ",(0,t.jsx)(n.code,{children:"showScreen"})," method of the Navigation class. This method hides the current screen and presents a new screen."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { MainScreen } from './app/screens/main/MainScreen';\nimport { LoadScreen } from './app/screens/LoadScreen';\n\nawait engine.navigation.showScreen(LoadScreen);\nawait engine.navigation.showScreen(MainScreen);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"popup-screens",children:"Popup Screens"}),"\n",(0,t.jsx)(n.p,{children:"You can also show popup screens on top of the current screen. Popup screens are displayed in a separate layer above the main screen."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { PauseScreen } from './app/screens/PauseScreen';\n\nawait engine.navigation.presentPopup(PauseScreen);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["equally you can hide the popup screen using the ",(0,t.jsx)(n.code,{children:"dismissPopup"})," method."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"await engine.navigation.dismissPopup();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"asset-loading",children:"Asset Loading"}),"\n",(0,t.jsx)(n.p,{children:"Using AssetPack you can define bundles of assets for your application. These bundles can be loaded individually to avoid loading all assets at once.\nTypically you would define a bundle for each screen in your application, and load them as needed."}),"\n",(0,t.jsxs)(n.p,{children:["To help with this a screen can implements a ",(0,t.jsx)(n.code,{children:"static assetBundles: string[]"})," property that defines the bundles required for that screen. The engine will automatically load these bundles when the screen is shown."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'export class MainScreen extends Container {\n  /** Assets bundles required by this screen */\n  public static assetBundles = ["main"];\n\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"audio",children:"Audio"}),"\n",(0,t.jsxs)(n.p,{children:["The engine includes built-in support for managing background music (bgm) and sound effects (sfx). You can control audio playback using the ",(0,t.jsx)(n.code,{children:"audio"})," property on the ",(0,t.jsx)(n.code,{children:"CreationEngine"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// Play background music\nengine.audio.bgm.play('background-music.mp3', { volume: 0.5 });\n\n// Play sound effect\nengine.audio.sfx.play('explosion.mp3', { volume: 0.8 });\n"})}),"\n",(0,t.jsx)(n.h3,{id:"background-music-bgm",children:"Background Music (bgm)"}),"\n",(0,t.jsx)(n.p,{children:"Handles music background, playing only one audio file in loop at time, and fade/stop the music if a new one is requested. Also provide volume control for music background only, leaving other sounds volumes unchanged."}),"\n",(0,t.jsx)(n.h3,{id:"sound-effects-sfx",children:"Sound Effects (sfx)"}),"\n",(0,t.jsx)(n.p,{children:"Handles short sound special effects, mainly for having its own volume settings. The volume control is only a workaround to make it work only with this type of sound, with a limitation of not controlling volume of currently playing instances - only the new ones will have their volume changed. But because most of sound effects are short sounds, this is generally fine."}),"\n",(0,t.jsx)(n.h3,{id:"global-volume",children:"Global Volume"}),"\n",(0,t.jsx)(n.p,{children:"While you can control the volume of each audio type, you can also control the global volume of all audio the exposed global volume functions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"engine.audio.setMasterVolume(0.5);\nconst volume = engine.audio.getMasterVolume();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,t.jsx)(n.p,{children:"The engine provides several utility functions for common tasks, such as calculating distances, interpolating values, and generating random numbers."}),"\n",(0,t.jsx)(n.p,{children:"This is not an exhaustive list, but here are some examples:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { getDistance, lerp, clamp } from './engine/utils/maths';\nimport { randomInt, randomFloat } from './engine/utils/random';\n\nconst distance = getDistance(0, 0, 10, 10);\nconst interpolatedValue = lerp(0, 10, 0.5);\nconst clampedValue = clamp(15, 0, 10);\n\nconst randValue = randomInt(0, 10);\nconst randFloat = randomFloat(0, 10);\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);